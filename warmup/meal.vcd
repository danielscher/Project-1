$date
	Mon Jun 13 17:47:43 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module SanitizerWarmup $end
$var wire 32 ! a [31:0] $end
$var wire 32 " b [31:0] $end
$var wire 1 # clock $end
$var wire 1 $ inp $end
$var wire 1 % start $end
$var wire 32 & r [31:0] $end
$var wire 32 ' q [31:0] $end
$var wire 2 ( outp [1:0] $end
$scope module divs $end
$var wire 32 ) a [31:0] $end
$var wire 32 * b [31:0] $end
$var wire 1 # clock $end
$var wire 32 + q [31:0] $end
$var wire 32 , r [31:0] $end
$var wire 1 % start $end
$var reg 1 - enable $end
$var reg 32 . i [31:0] $end
$var reg 32 / qx [31:0] $end
$var reg 32 0 r_curr [31:0] $end
$var reg 32 1 rx [31:0] $end
$upscope $end
$scope module mp $end
$var wire 1 # clock $end
$var wire 1 $ i $end
$var wire 2 2 o [1:0] $end
$var reg 1 3 o0 $end
$var reg 1 4 o1 $end
$var reg 1 5 q0 $end
$var reg 1 6 q1 $end
$upscope $end
$scope module tb $end
$var wire 2 7 o [1:0] $end
$var reg 1 8 clk $end
$var reg 1 9 i $end
$var reg 32 : j [0:31] $end
$var reg 10 ; str [0:9] $end
$scope module machine $end
$var wire 1 8 clock $end
$var wire 1 9 i $end
$var wire 2 < o [1:0] $end
$var reg 1 = o0 $end
$var reg 1 > o1 $end
$var reg 1 ? q0 $end
$var reg 1 @ q1 $end
$upscope $end
$upscope $end
$upscope $end
$scope module SanitizerWarmup $end
$scope module tb $end
$scope module machine $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x@
x?
0>
0=
b0 <
b1110011001 ;
b0 :
19
08
b0 7
x6
x5
04
03
b0 2
b0 1
bx 0
b0 /
b11111 .
0-
b0 ,
b0 +
bz *
bz )
b0 (
b0 '
b0 &
z%
z$
z#
bz "
bz !
$end
#1
1?
18
#2
08
b1 :
#3
1@
18
#4
08
b10 :
#5
18
#6
b10 7
b10 <
1=
08
09
b11 :
#7
b0 7
b0 <
0=
0?
18
#8
08
b100 :
#9
0@
18
#10
b1 7
b1 <
1>
08
19
b101 :
#11
b0 7
b0 <
0>
1?
18
#12
08
b110 :
#13
1@
18
#14
b10 7
b10 <
1=
08
09
b111 :
#15
b0 7
b0 <
0=
0?
18
#16
08
b1000 :
#17
0@
18
#18
b1 7
b1 <
1>
08
19
b1001 :
#19
b0 7
b0 <
0>
1?
18
#20
08
b1010 :
#21
1@
18
